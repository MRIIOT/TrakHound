@implements IDisposable
@rendermode InteractiveServer
@inject ExplorerService explorerService
@using TrakHound.Services

@if (ServiceInformation != null)
{
    var startDisabled = ServiceInformation.Status == TrakHoundServiceStatusType.Stopped ? "" : "disabled";
    var startLabel = ServiceInformation.Status == TrakHoundServiceStatusType.Starting ? "Starting.." : "Start";
    var startIcon = ServiceInformation.Status == TrakHoundServiceStatusType.Starting ? "fa-solid fa-sharp fa-loader spin" : "fa-solid fa-sharp fa-play";

    var stopDisabled = ServiceInformation.Status == TrakHoundServiceStatusType.Started ? "" : "disabled";
    var stopLabel = ServiceInformation.Status == TrakHoundServiceStatusType.Stopping ? "Stopping.." : "Stop";
    var stopIcon = ServiceInformation.Status == TrakHoundServiceStatusType.Stopping ? "fa-solid fa-sharp fa-loader spin" : "fa-solid fa-sharp fa-stop";
    
    
    var lastUpdatedAgo = DateTime.UtcNow - ServiceInformation.LastUpdated;

    <div class="toolbar-panel">
        <div class="toolbar-buttons-container">
            <button class="btn btn-light btn-start @startDisabled" @onclick="StartClicked"><span class="icon @startIcon"></span>@startLabel</button>
            <button class="btn btn-light btn-stop @stopDisabled" @onclick="StopClicked"><span class="icon @stopIcon"></span>@stopLabel</button>
        </div>
        <div class="toolbar-status-container">
            <label class="toolbar-status">@ServiceInformation.Status</label>
            <label class="toolbar-status-timer">@lastUpdatedAgo.ToFormattedString()<span class="toolbar-status-timestamp">@ServiceInformation.LastUpdated.ToLocalTime()</span></label>
        </div>
    </div>
}

@code {

    private System.Timers.Timer updateTimer;


    [CascadingParameter(Name = "Explorer")]
    public TrakHound.Blazor.Explorer Explorer { get; set; }

    [Parameter]
    public TrakHoundServiceInformation ServiceInformation { get; set; }


    protected override void OnInitialized()
    {
        updateTimer = new System.Timers.Timer();
        updateTimer.Interval = 500;
        updateTimer.Elapsed += UpdateTimerElapsed;
        updateTimer.Start();
    }

    void IDisposable.Dispose()
    {
        try
        {
            if (updateTimer != null)
            {
                updateTimer.Elapsed -= UpdateTimerElapsed;
                updateTimer.Dispose();
            }
        }
        catch { }
    }

    private async void UpdateTimerElapsed(object sender, System.Timers.ElapsedEventArgs args)
    {
        await InvokeAsync(StateHasChanged);
    }


    private async void StartClicked()
    {
        var client = Explorer.Instances.GetClient(explorerService.SelectedInstanceId);
        if (client != null)
        {
            var status = await client.System.Services.StartService(ServiceInformation.Id);
        }
    }

    private async void StopClicked()
    {
        var client = Explorer.Instances.GetClient(explorerService.SelectedInstanceId);
        if (client != null)
        {
            var status = await client.System.Services.StopService(ServiceInformation.Id);
        }
    }

}
