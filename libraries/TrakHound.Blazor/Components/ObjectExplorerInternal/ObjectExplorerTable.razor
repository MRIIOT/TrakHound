@inject NavigationManager navigationManager
@inject IJSRuntime JSRuntime;
@using TrakHound.Entities

@if (!tableItems.IsNullOrEmpty())
{
    @if (!loading)
    {
        <div class="object-table-panel">

            <div class="toolbar-panel">
                <div class="toolbar-panel-container">
                    <div class="toolbar-panel-filter">
                        <RadzenDropDown TValue="IEnumerable<string>" Value=@visibleColumns ValueChanged="VisibleColumnsChanged" Data=@columns Multiple=true AllowClear=true SelectedItemsText="Visible" />
                    </div>
                    <div class="toolbar-panel-export">
                        @*<button class="btn btn-sm btn-light btn-export-excel" @onclick="ExportExcelClicked"><span class="icon fa-solid fa-sharp fa-file-excel"></span>Excel</button>*@
                        <button class="btn btn-sm btn-light btn-export-csv" @onclick="ExportCsvClicked"><span class="icon fa-solid fa-sharp fa-file-csv"></span>CSV</button>
                        <button class="btn btn-sm btn-light btn-export-json" @onclick="ExportJsonClicked"><span class="icon fa-regular fa-brackets-curly"></span>JSON</button>
                    </div>
                </div>
            </div>

            <div class="table-panel">
                <RadzenDataGrid @ref="dataGrid"
                                Data="@tableItems"
                                TItem="TableItem"
                                Density="Density.Compact"
                                GridLines="DataGridGridLines.Vertical"
                                AllowFiltering="true"
                                AllowSorting="true"
                                AllowPaging="true"
                                AllowColumnReorder="true"
                                AllowColumnResize="true"
                                PageSize="1000">
                    <Columns>
                        <RadzenDataGridColumn TItem="TableItem" Property="Path" Title="Path" CssClass="path" Width="200px" Frozen="true" />

                        @if (!metadataColumns.IsNullOrEmpty())
                        {
                            foreach (var column in metadataColumns)
                            {
                                var property = $"Metadata[\"{column}\"]";
                                var columnWidth = Math.Max(150, (column.Length * 12) + 0);
                                var columnWidthProperty = $"{columnWidth}px";

                                <RadzenDataGridColumn TItem="TableItem" Property="@property" Title="@column" CssClass="path" Width="@columnWidthProperty">
                                    <Template Context="context">

                                        @if (!context.Metadata.IsNullOrEmpty())
                                        {
                                            <span>@context.Metadata.GetValueOrDefault(column)</span>
                                        }

                                    </Template>
                                </RadzenDataGridColumn>
                            }
                        }

                        @if (!contentColumns.IsNullOrEmpty())
                        {
                            foreach (var column in contentColumns)
                            {
                                var property = $"ContentValues[\"{column}\"]";
                                var columnWidth = Math.Max(150, (column.Length * 12) + 0);
                                var columnWidthProperty = $"{columnWidth}px";

                                <RadzenDataGridColumn TItem="TableItem" Property="@property" Title="@column" CssClass="path" Width="@columnWidthProperty">
                                    <Template Context="context">

                                        @if (!context.ContentValues.IsNullOrEmpty())
                                        {
                                            <span>@context.ContentValues.GetValueOrDefault(column)</span>
                                        }

                                    </Template>
                                </RadzenDataGridColumn>
                            }
                        }

                    </Columns>
                </RadzenDataGrid>
            </div>

        </div>
    }
    else
    {
        <div class="loading-panel">
            <div class="loading-panel-container">
                <label>Loading Table..</label>
                <ArraySpinner />
            </div>
        </div>
    }
}

@code {

    RadzenDataGrid<TableItem> dataGrid;

    private IEnumerable<TableItem> tableItems;
    private IEnumerable<string> metadataColumns;
    private IEnumerable<string> contentColumns;
    private readonly Dictionary<string, string> itemUuids = new Dictionary<string, string>();
    private readonly Dictionary<string, string> valueObjectUuids = new Dictionary<string, string>();
    private bool loading = true;

    private IEnumerable<string> columns;
    private IEnumerable<string> visibleColumns;

    class TableItem
    {
        public string Uuid { get; set; }
        public string Name { get; set; }
        public string Type { get; set; }
        public string Path { get; set; }
        public Dictionary<string, string> Metadata { get; set; }
        public Dictionary<string, string> ContentValues { get; set; }
    }

    //struct ItemData
    //{
    //    public string Uuid { get; set; }
    //    public string Name { get; set; }
    //    public string Type { get; set; }
    //    public string Path { get; set; }
    //    public Dictionary<string, string> Metadata { get; set; }
    //    public Dictionary<string, string> ContentValues { get; set; }
    //}

    //[Parameter]
    //public IEnumerable<ITrakHoundObjectEntityModel> Objects { get; set; }

    [CascadingParameter(Name = "ObjectExplorerService")]
    public ObjectExplorerService ObjectExplorerService { get; set; }


    protected async override Task OnInitializedAsync()
    {
        ObjectExplorerService.TargetObjectsUpdated += TargetsUpdated;
        ObjectExplorerService.ValueUpdated += ValueUpdated;

        //var settings = new DataGridSettings();

        //var columns = new List<DataGridColumnSettings>();

        //var columnSettings = new DataGridColumnSettings();
        //columnSettings.Property = "Path";
        //columnSettings.Visible = true;
        //columns.Add(columnSettings);

        //settings.Columns = columns;

        //tableSettings = settings;

        await Load();
    }

    //protected async override Task OnParametersSetAsync()
    //{
    //    await Load();
    //}

    private async void TargetsUpdated(object sender, EventArgs args)
    {
        await Load();
    }

    private async Task Load()
    {
        if (ObjectExplorerService != null)
        {
            itemUuids.Clear();
            valueObjectUuids.Clear();
            loading = true;
            await InvokeAsync(StateHasChanged);

            var objects = ObjectExplorerService.GetTargetObjects();
            if (!objects.IsNullOrEmpty())
            {
                var items = new List<TableItem>();

                var objectUuids = objects.Select(o => o.Uuid);
                await ObjectExplorerService.LoadObjects(objectUuids);
                ObjectExplorerService.LoadContent(objects);

                if (!objects.IsNullOrEmpty())
                {
                    foreach (var obj in objects)
                    {
                        // items.AddRange(CreateTableItems(obj));
                    }
                }

                metadataColumns = items.SelectMany(x => x.Metadata.Select(y => y.Key)).Where(o => !string.IsNullOrEmpty(o)).Distinct().ToList();
                contentColumns = items.SelectMany(x => x.ContentValues.Select(y => y.Key)).Where(o => !string.IsNullOrEmpty(o)).Distinct().ToList();

                var cols = new List<string>();
                cols.Add("Path");
                cols.AddRange(metadataColumns);
                cols.AddRange(contentColumns);
                columns = cols;
                visibleColumns = columns;

                tableItems = items;
            }

            loading = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private IEnumerable<TableItem> CreateTableItems(ITrakHoundObjectEntity objectEntity)
    {
        var items = new List<TableItem>();

        // if (ObjectExplorerService != null && objectEntity != null && !string.IsNullOrEmpty(objectEntity.Uuid) && !string.IsNullOrEmpty(objectEntity.Path))
        // {
        //     var item = new TableItem();
        //     item.Uuid = objectEntity.Uuid;
        //     item.Name = objectEntity.Path;
        //     item.Type = objectEntity.Type;
        //     item.Path = objectEntity.Path;

        //     var dMetadata = new Dictionary<string, string>();
        //     var contentValues = new Dictionary<string, string>();

        //     if (!objectEntity.Metadata.IsNullOrEmpty())
        //     {
        //         foreach (var metadata in objectEntity.Metadata)
        //         {
        //             if (!dMetadata.ContainsKey(metadata.Name)) dMetadata.Add(metadata.Name, metadata.Value);
        //         }
        //     }

        //     if (objectEntity.ContentType != TrakHoundObjectContentTypes.Directory)
        //     {
        //         if (!contentValues.ContainsKey(objectEntity.Path)) contentValues.Add(objectEntity.Path, ObjectExplorerService.GetValue(objectEntity.Uuid));
        //         if (!itemUuids.ContainsKey(objectEntity.Uuid)) itemUuids.Add(objectEntity.Uuid, objectEntity.Uuid);
        //         if (!valueObjectUuids.ContainsKey(objectEntity.Uuid)) valueObjectUuids.Add(objectEntity.Uuid, objectEntity.Path);
        //     }

        //     var contentChildren = objectEntity.Children?.Where(o => o.ContentType != TrakHoundObjectContentTypes.Directory);
        //     if (!contentChildren.IsNullOrEmpty())
        //     {
        //         foreach (var contentObj in contentChildren)
        //         {
        //             if (!contentValues.ContainsKey(contentObj.Path)) contentValues.Add(contentObj.Path, ObjectExplorerService.GetValue(contentObj.Uuid));
        //             if (!itemUuids.ContainsKey(contentObj.Uuid)) itemUuids.Add(contentObj.Uuid, objectEntity.Uuid);
        //             if (!valueObjectUuids.ContainsKey(contentObj.Uuid)) valueObjectUuids.Add(contentObj.Uuid, contentObj.Path);
        //         }
        //     }

        //     item.Metadata = dMetadata;
        //     item.ContentValues = contentValues;
        //     items.Add(item);
        // }

        return items;
    }

    private async void ValueUpdated(object sender, string objectUuid)
    {
        //if (objectUuid != null)
        //{
        //    var itemUuid = itemUuids?.GetValueOrDefault(objectUuid);
        //    if (itemUuid != null)
        //    {
        //        var tableItem = tableItems?.FirstOrDefault(o => o.Uuid == itemUuid);
        //        if (tableItem != null)
        //        {
        //            var valueName = valueObjectUuids?.GetValueOrDefault(objectUuid);
        //            if (valueName != null)
        //            {
        //                if (!tableItem.ContentValues.IsNullOrEmpty())
        //                {
        //                    tableItem.ContentValues.Remove(valueName);
        //                    tableItem.ContentValues.Add(valueName, treeService.GetValue(objectUuid));
        //                }
        //            }
        //        }
        //    }
        //}

        //await InvokeAsync(StateHasChanged);
    }

    private void VisibleColumnsChanged(IEnumerable<string> values)
    {
        visibleColumns = values;

        foreach (var column in dataGrid.ColumnsCollection)
        {
            var columnTitle = column.GetTitle();
            if (columnTitle != null)
            {
                column.Visible = !values.IsNullOrEmpty() && values.Contains(columnTitle);
            }
        }
    }

    private async void ExportExcelClicked()
    {
        //var exportKey = CreateExportItems();
        //if (exportKey != null)
        //{
        //    var url = $"export/{exportKey}/download/excel";

        //    try
        //    {
        //        await JSRuntime.InvokeAsync<object>("open", url, "_blank");
        //    }
        //    catch { }
        //}
        //else
        //{

        //}
    }

    private async void ExportCsvClicked()
    {
        //var exportKey = CreateExportItems();
        //if (exportKey != null)
        //{
        //    var url = $"export/{exportKey}/download/csv";

        //    try
        //    {
        //        await JSRuntime.InvokeAsync<object>("open", url, "_blank");
        //    }
        //    catch { }
        //}
        //else
        //{

        //}
    }

    private async void ExportJsonClicked()
    {
        //var exportKey = CreateExportItems();
        //if (exportKey != null)
        //{
        //    var url = $"export/{exportKey}/download/json";

        //    try
        //    {
        //        await JSRuntime.InvokeAsync<object>("open", url, "_blank");
        //    }
        //    catch { }
        //}
        //else
        //{

        //}
    }

    //private string CreateExportItems()
    //{
    //    if (!tableItems.IsNullOrEmpty() && !visibleColumns.IsNullOrEmpty())
    //    {
    //        var exportItems = new List<ExportItem>();
    //        var propertyOrder = new Dictionary<string, int>();
    //        for (var i = 0; i < dataGrid.ColumnsCollection.Count(); i++)
    //        {
    //            var columnTitle = dataGrid.ColumnsCollection[i].Title;
    //            if (!propertyOrder.ContainsKey(columnTitle)) propertyOrder.Add(columnTitle, i);
    //        }

    //        var aTableItems = tableItems.ToArray();
    //        for (var i = 0; i < aTableItems.Length; i++)
    //        {
    //            var tableItem = aTableItems[i];

    //            var exportProperties = new List<ExportProperty>();


    //            if (visibleColumns.Contains("Path")) 
    //            {
    //                var order = propertyOrder.GetValueOrDefault("Path");
    //                exportProperties.Add(new ExportProperty("Path", tableItem.Path, order));
    //            }

    //            if (!tableItem.Metadata.IsNullOrEmpty())
    //            {
    //                foreach (var metadata in tableItem.Metadata)
    //                {
    //                    var order = propertyOrder.GetValueOrDefault(metadata.Key);
    //                    if (visibleColumns.Contains(metadata.Key)) exportProperties.Add(new ExportProperty(metadata.Key, metadata.Value, order));
    //                }
    //            }

    //            if (!tableItem.ContentValues.IsNullOrEmpty())
    //            {
    //                foreach (var contentValue in tableItem.ContentValues)
    //                {
    //                    var order = propertyOrder.GetValueOrDefault(contentValue.Key);
    //                    if (visibleColumns.Contains(contentValue.Key)) exportProperties.Add(new ExportProperty(contentValue.Key, contentValue.Value, order));
    //                }
    //            }

    //            exportItems.Add(new ExportItem(i, exportProperties.ToArray()));
    //        }

    //        return exportService.AddItems(exportItems);
    //    }

    //    return null;
    //}

}
